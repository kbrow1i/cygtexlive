--- origsrc/texmf-dist/scripts/texlive/tlmgr.pl	2016-03-31 15:04:54.972154300 -0400
+++ src/texmf-dist/scripts/texlive/tlmgr.pl	2016-03-31 15:16:18.492720200 -0400
@@ -1,13 +1,13 @@
 #!/usr/bin/env perl
-# $Id: tlmgr.pl 39298 2016-01-07 02:44:29Z preining $
+# $Id$
 #
-# Copyright 2008-2015 Norbert Preining
+# Copyright 2008-2016 Norbert Preining
 # This file is licensed under the GNU General Public License version 2
 # or any later version.
 #
 
-my $svnrev = '$Revision: 39298 $';
-my $datrev = '$Date: 2016-01-07 03:44:29 +0100 (Thu, 07 Jan 2016) $';
+my $svnrev = '$Revision$';
+my $datrev = '$Date$';
 my $tlmgrrevision;
 my $prg;
 if ($svnrev =~ m/: ([0-9]+) /) {
@@ -561,6 +561,14 @@ for the full story.\n";
   # load it BEFORE starting downloads as we set persistent-downloads there!
   load_config_file();
 
+  # in system mode verify that the selected action is allowed
+  if (!$opts{"usermode"} && $config{'allowed-actions'}) {
+    if (!TeXLive::TLUtils::member($action, @{$config{'allowed-actions'}})) {
+      tlwarn("$prg: action not allowed in system mode: $action\n");
+      exit ($F_ERROR);
+    }
+  }
+
   # set global variable if execute actions should be suppressed
   $::no_execute_actions = 1 if (defined($opts{'no-execute-actions'}));
 
@@ -595,7 +603,13 @@ for the full story.\n";
 
   my $ret = execute_action($action, @ARGV);
 
-  if ($ret & $F_ERROR) {
+  # F_ERROR stops processing immediately, and prevents postactions from
+  # being run (e.g., untar fails).  F_WARNING continues on, including
+  # postactions (e.g., user tries to install 10 packages and the
+  # checksum fails for one, but the others are ok), but still ends the
+  # program by exiting unsuccessfully.  So call them both "errors" 
+  # as far as the user is concerned.
+  if ($ret & ($F_ERROR | $F_WARNING)) {
     tlwarn("$prg: An error has occurred. See above messages. Exiting.\n");
   }
 
@@ -660,7 +674,7 @@ sub execute_action {
       return($foo);
     }
     if ($foo & $F_WARNING) {
-      tlwarn("$prg: action $action returned a warning.\n");
+      tlwarn("$prg: action $action returned an error; continuing.\n");
       $ret = $foo;
     }
   } else {
@@ -696,8 +710,7 @@ sub execute_action {
 # run CMD with notice to the user and if exit status is nonzero, complain.
 # return exit status.
 # 
-sub do_cmd_and_check
-{
+sub do_cmd_and_check {
   my $cmd = shift;
   # we output the pre-running notice on a separate line so that
   # tlmgr front ends (MacOSX's TeX Live Utility) can read it
@@ -996,7 +1009,7 @@ sub action_remove {
   info("$prg remove: dry run, no changes will be made\n") if $opts{"dry-run"};
   my @packs = @ARGV;
   #
-  # we have to be carefull not to remove too many packages. The idea is
+  # we have to be careful not to remove too many packages. The idea is
   # as follows:
   # - let A be the set of all packages to be removed from the cmd line
   # - let A* be the set of A with all dependencies expanded
@@ -1114,10 +1127,10 @@ sub action_paper {
   init_local_db();
   my $texmfconfig;
   if ($opts{"usermode"}) {
-    chomp($texmfconfig = `kpsewhich -var-value=TEXMFCONFIG`);
-  } else {
-    chomp($texmfconfig = `kpsewhich -var-value=TEXMFSYSCONFIG`);
+    tlwarn("$prg: action `paper' not supported in usermode\n");
+    return ($F_ERROR);
   }
+  chomp($texmfconfig = `kpsewhich -var-value=TEXMFSYSCONFIG`);
   $ENV{"TEXMFCONFIG"} = $texmfconfig;
 
   my $action = shift @ARGV;
@@ -1447,8 +1460,8 @@ sub action_info {
       }
     }
     # some packages might depend on other packages, so do not
-    # include arbitrary package in the list of collections, but
-    # only collectons:
+    # include arbitrary packages in the list of collections, but
+    # only collections:
     @colls = grep {m;^collection-;} @colls;
     print "package:     ", $tlp->name, "\n";
     print "repository:  ", $source_found, "\n" if (defined($source_found));
@@ -1985,25 +1998,25 @@ sub action_backup {
 # =====================================================================
 #                  INFRASTRUCTURE UPDATE ON WINDOWS
 # =====================================================================
-#      Infrastructure files cannot be updated directly from the 
-# tlmgr.pl script due to file locking problem on Windows - files that 
-# are in use (either open or executing) cannot be removed or replaced. 
-# For that reason the update process is performed by a batch script 
+#      Infrastructure files cannot be updated directly from the
+# tlmgr.pl script due to file locking problem on Windows - files that
+# are in use (either open or executing) cannot be removed or replaced.
+# For that reason the update process is performed by a batch script
 # outside of tlmgr.pl.
-#      There are three pieces involved in the update: tlmgr.bat 
-# launcher, write_w32_updater subroutine below and a batch 
+#      There are three pieces involved in the update: tlmgr.bat
+# launcher, write_w32_updater subroutine below and a batch
 # updater script. Their roles are as follows:
 # * tlmgr.bat is a watchdog, it launches tlmgr.pl and watches for
-#   the updater script that is to be executed. If the updater script 
-#   exists before tlmgr.pl is launched, it will be removed or 
-#   tlmgr.bat will abort if it fails to do so. This means that the 
-#   updater script has to be created by the current invocation of 
-#   tlmgr.pl. Futhermore, the updater script is renamed from 
-#   updater-w32 to updater-w32.bat just before it is run, and thus 
+#   the updater script that is to be executed. If the updater script
+#   exists before tlmgr.pl is launched, it will be removed or
+#   tlmgr.bat will abort if it fails to do so. This means that the
+#   updater script has to be created by the current invocation of
+#   tlmgr.pl. Furthermore, the updater script is renamed from
+#   updater-w32 to updater-w32.bat just before it is run, and thus
 #   it can be executed only once.
 # * write_w32_updater subroutine in tlmgr.pl prepares the update
 #   and writes the updater script. Packages in .xz archives are
-#   dowloaded/copied and uncompressed to .tar files. Also .tar 
+#   downloaded/copied and uncompressed to .tar files. Also .tar
 #   backups of the current packages are made. If everything is 
 #   successful, the update script is created from the template. 
 #   Otherwise the update is aborted.
@@ -2070,7 +2083,7 @@ sub write_w32_updater {
     my $localtlp = $localtlpdb->get_package($pkg);
     my $oldrev = $localtlp->revision;
     my $newrev = $mediatlp->revision;
-    # we do install documenation files for category Documentation even if
+    # we do install documentation files for category Documentation even if
     # option("install_docfiles") is false
     my $opt_real_doc = ($mediatlp->category =~ m/documentation/i) ? 1 : $opt_doc;
     my @pkg_parts = ($pkg);
@@ -2793,10 +2806,10 @@ sub action_update {
       }
     }
     #
-    # the idea of supressing warnings is simply that if a file is present
+    # the idea of suppressing warnings is simply that if a file is present
     # in more than one package either in the beginning or after a full 
     # update then this should give a warning. In all other cases
-    # the warning should be supressed.
+    # the warning should be suppressed.
     for my $f (keys %old_files_to_pkgs) {
       my @a = @{$old_files_to_pkgs{$f}};
       $do_warn_on_move{$f} = 1 if ($#a > 0)
@@ -3153,8 +3166,9 @@ sub action_update {
           $remove_unwind_container = 1;
           $unwind_package = $newname;
         }
-        my $instret = TeXLive::TLPDB->_install_package("$unwind_package", 0,
-                                                       [], $localtlpdb);
+
+        my ($instret, $msg) = TeXLive::TLUtils::unpack("$unwind_package",
+          $localtlpdb->root);
         if ($instret) {
           # now we have to include the tlpobj
           my $tlpobj = TeXLive::TLPOBJ->new;
@@ -3167,6 +3181,7 @@ sub action_update {
         } else {
           logpackage("failed restore: $pkg ($rev)");
           tlwarn("$prg: Restoring of old package did NOT succeed.\n");
+          tlwarn("$prg: Error message from unpack: $msg\n");
           tlwarn("$prg: Most likely repair: run tlmgr install $pkg and hope.\n");
           # TODO_ERRORCHECKING
           # should we return F_ERROR here??? If we would do this, then
@@ -3441,7 +3456,7 @@ sub check_announce_format_triggers {
 #   take .ARCH deps into account
 #
 # tlmgr install --reinstall ...
-#   behaves exactely like without --reinstall BUT the following two
+#   behaves exactly like without --reinstall BUT the following two
 #   differences:
 #   . dependencies are not expanded from collection to collection, so
 #     if you reinstall a collection then all its dependencies of type
@@ -3639,9 +3654,12 @@ sub action_install {
       info("[$currnr/$totalnr, $estrem/$esttot] ${re}install: $pkg$tagstr [${kb}k]\n");
     }
     if (!$opts{"dry-run"}) {
-      $remotetlpdb->install_package($pkg, $localtlpdb,
-        ($packs{$pkg} ? $packs{$pkg} : undef) );
-      logpackage("${re}install: $pkg$tagstr");
+      if ($remotetlpdb->install_package($pkg, $localtlpdb,
+            ($packs{$pkg} ? $packs{$pkg} : undef) )) {
+        logpackage("${re}install: $pkg$tagstr");
+      } else {
+        logpackage("failed ${re}install: $pkg$tagstr");
+      }
     }
     $donesize += $sizes{$pkg};
     $currnr++;
@@ -4093,7 +4111,7 @@ sub action_option {
   init_local_db();
   my $ret = $F_OK;
   if ($what =~ m/^show$/i) {
-    for my $o (keys %{$localtlpdb->options}) {
+    for my $o (sort keys %{$localtlpdb->options}) {
       # ignore some things which are w32 specific
       next if ($o eq "desktop_integration" && !win32());
       next if ($o eq "file_assocs" && !win32());
@@ -5441,6 +5459,7 @@ sub action_init_usertree {
   # and for tlmgr.log file
   mkdir ("$usertree/web2c");
   mkdir ("$usertree/tlpkg/tlpobj");
+  return ($F_OK);
 }
 
 #  CONF
@@ -5657,8 +5676,7 @@ sub init_tlmedia_or_die {
   }
 }
 
-sub init_tlmedia
-{
+sub init_tlmedia {
   # first check if $location contains multiple locations
   # in this case we go to virtual mode
   #my %repos = repository_to_array($localtlpdb->option("location"));
@@ -5731,12 +5749,7 @@ sub init_tlmedia
   return 1;
 }
 
-
-
-
-sub _init_tlmedia
-{
-
+sub _init_tlmedia {
   # if we are already initialized to the same location, nothing
   # needs to be done.
   # if we are initialized to a virtual tlpdb, then we have to 
@@ -5769,8 +5782,7 @@ sub _init_tlmedia
   return 1;
 }
 
-sub setup_one_remotetlpdb
-{
+sub setup_one_remotetlpdb {
   my $location = shift;
   my $remotetlpdb;
 
@@ -5974,15 +5986,27 @@ sub load_config_file {
   # by default we remove packages
   $config{"auto-remove"} = 1;
 
+  # loads system config file, this cannot be changes with tlmgr
+  chomp (my $TEXMFSYSCONFIG = `kpsewhich -var-value=TEXMFSYSCONFIG`);
+  my $fnsys = "$TEXMFSYSCONFIG/tlmgr/config";
+  my $tlmgr_sys_config_file = TeXLive::TLConfFile->new($fnsys, "#", "=");
+  load_options_from_config($tlmgr_sys_config_file, 'sys') 
+    if $tlmgr_sys_config_file;
+
   chomp (my $TEXMFCONFIG = `kpsewhich -var-value=TEXMFCONFIG`);
   my $fn = "$TEXMFCONFIG/tlmgr/config";
   $tlmgr_config_file = TeXLive::TLConfFile->new($fn, "#", "=");
+  load_options_from_config($tlmgr_config_file) if $tlmgr_config_file;
 
   # switched names for this one after initial release.
   if ($tlmgr_config_file->key_present("gui_expertmode")) {
     $tlmgr_config_file->rename_key("gui_expertmode", "gui-expertmode");
   }
+}
 
+sub load_options_from_config {
+  my ($tlmgr_config_file, $sysmode) = @_;
+  my $fn = $tlmgr_config_file->file;
   for my $key ($tlmgr_config_file->keys) {
     my $val = $tlmgr_config_file->value($key);
     if ($key eq "gui-expertmode") {
@@ -6013,6 +6037,14 @@ sub load_config_file {
         tlwarn("$prg: $fn: Unknown value for auto-remove: $val\n");
       }
 
+    } elsif ($sysmode) {
+      # keys here are only allowed in sys mode
+      if ($key eq "allowed-actions") {
+        my @acts = split(/,/, $val);
+        $config{'allowed-actions'} = \@acts;
+      } else {
+        tlwarn("$prg: $fn: Unknown tlmgr configuration variable: $key\n");
+      }
     } else {
       tlwarn("$prg: $fn: Unknown tlmgr configuration variable: $key\n");
     }
@@ -6045,8 +6077,7 @@ sub write_config_file {
 
 # if the packagelog variable is set then write to PACKAGELOG filehandle
 #
-sub logpackage
-{
+sub logpackage {
   if ($packagelogfile) {
     $packagelogged++;
     my $tim = localtime();
@@ -6055,8 +6086,7 @@ sub logpackage
 }
 
 # resolve relative paths from tlpdb wrt tlroot 
-sub norm_tlpdb_path
-{
+sub norm_tlpdb_path {
   my ($path) = @_;
   return if (!defined($path));
   $path =~ s!\\!/!;
@@ -6068,8 +6098,8 @@ sub norm_tlpdb_path
 
 # clear the backup dir for $pkg and keep only $autobackup packages
 # mind that with $autobackup == 0 all packages are cleared
-sub clear_old_backups
-{
+#
+sub clear_old_backups {
   my ($pkg, $backupdir, $autobackup, $dry) = @_;
 
   my $dryrun = 0;
@@ -6098,8 +6128,7 @@ sub clear_old_backups
 
 # check for updates to tlcritical packages
 #
-sub check_for_critical_updates
-{
+sub check_for_critical_updates {
   my ($localtlpdb, $mediatlpdb) = @_;
 
   my $criticalupdate = 0;
@@ -6328,7 +6357,7 @@ debugging.
 
 C<tlmgr> logs all package actions (install, remove, update, failed
 updates, failed restores) to a separate log file, by default
-C<TEXMFSYSVAR/web2c/tlmgr.log>.  This option allows you to specific a
+C<TEXMFSYSVAR/web2c/tlmgr.log>.  This option allows you to specify a
 different file for the log.
 
 =item B<--pause>
@@ -7501,13 +7530,17 @@ creates configuration files in user tree
 
 =head1 CONFIGURATION FILE FOR TLMGR
 
-A small subset of the command line options can be set in a config file
-for C<tlmgr> which resides in C<TEXMFCONFIG/tlmgr/config>.  By default, the
-config file is in C<~/.texliveYYYY/texmf-config/tlmgr/config> (replacing
-C<YYYY> with the year of your TeX Live installation). This is I<not>
-C<TEXMFSYSVAR>, so that the file is specific to a single user.
+There are two configuration files for C<tlmgr>: One is system wide
+in C<TEXMFSYSCONFIG/tlmgr/config>, and one user-specific in
+C<TEXMFCONFIG/tlmgr/config> (which is in the default setup
+C<~/.texliveYYYY/texmf-config/tlmgr/config> replacing
+C<YYYY> with the year of your TeX Live installation).
+
+A small subset of the command line options can be set in these
+configuration file. In addition, the system-wide can contain a directive
+to restrict the number of allowed actions.
 
-In this file, empty lines and lines starting with # are ignored.  All
+In these config files, empty lines and lines starting with # are ignored.  All
 other lines must look like
 
   key = value
@@ -7521,6 +7554,12 @@ the respective command line options of t
 switches between the full GUI and a simplified GUI with only the
 important and mostly used settings.
 
+In addition, the system-wide config file can contain the key
+C<allowed-actions>. The value is a comma separated list of actions that
+are allowed to be executed when C<tlmgr> is called in system mode (that is
+without C<--usermode>). This allows distributors to include the C<tlmgr>
+in the packaging but allow only for a very restricted set of actions not
+to interfere with package managers.
 
 =head1 MULTIPLE REPOSITORIES
 
