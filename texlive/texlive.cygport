NAME="texlive"
VERSION=20190410
RELEASE=1
YEAR=2019

HOMEPAGE="http://www.tug.org/texlive/"

# SVN_URI="svn://tug.org/texlive/trunk/Build/source"
SRC_URI="ftp://tug.org/texlive/Images/test/${P}-source.tar.xz"
# SRC_URI="mirror://ctan/systems/texlive/Source/${PN}-${PV}-source.tar.xz"

# SRC_URI="ftp://tug.org/historic/systems/texlive/${YEAR}/${PN}-${PV}-source.tar.xz"

# SVN_URI="svn://tug.org/texlive"
# SVN_BRANCH="branches/branch2018/Build/source"
#SVN_TAG="texlive-2018.2"?
#SVN_REV=48691
# inherit svn

SRC_URI+=" 0p_texlive_prep.dash"
SRC_URI+=" zp_texlive_finish.dash"
SRC_URI+=" texlive-enable-fontconfig.sh"
SRC_URI+=" README.Cygwin"
SRC_URI+=" 09-texlive.conf"

SRC_DIR="${PN}-${PV}-source"

PATCH_URI+=" 20190410-1-texmf_cnf.patch"
PATCH_URI+=" 20140523-2-reautoconf.patch"
# PATCH_URI+=" 20180414-1-dvidvi.patch"
# PATCH_URI+=" 20180414-1-poppler.patch"

DOCS="README.Cygwin"

DEPEND="
	libgd-devel
	libgmp-devel
	libgs-devel
	libiconv
	libicu-devel
	libmpfr-devel
	libpaper-devel
	libpotrace-devel
	pkgconfig(cairo)
	pkgconfig(fontconfig)
	pkgconfig(freetype2)
	pkgconfig(graphite2)
	pkgconfig(harfbuzz)
	pkgconfig(harfbuzz-icu)
	pkgconfig(libpng)
	pkgconfig(ncurses)
	pkgconfig(pixman-1)
	pkgconfig(poppler)
	pkgconfig(x11)
	pkgconfig(teckit)
	pkgconfig(xaw7)
	pkgconfig(xmu)
	pkgconfig(xpm)
	pkgconfig(xt)
	pkgconfig(zlib)
	pkgconfig(zziplib)
"
# The following are needed for building xindy docs.
DEPEND+=" texlive-collection-langgreek texlive-collection-langcyrillic texlive-collection-fontsrecommended"

PKG_NAMES="${PN} libkpathsea6 libkpathsea-devel libptexenc1 libptexenc-devel libsynctex1 libsynctex-devel libtexlua52_5 libtexlua52-devel libtexlua53_5 libtexlua53-devel libtexluajit2 libtexluajit-devel"

texlive_CONTENTS="
	etc/
	usr/bin/*.exe
	usr/bin/texlive-enable-fontconfig
	usr/bin/xindy.mem
	usr/share/applications/
	usr/share/doc/
	usr/share/fontconfig/
	var/
"

PKG_IGNORE="usr/share/info usr/share/man"

libkpathsea6_CONTENTS="usr/bin/cygkpathsea-6.dll"
libkpathsea_devel_CONTENTS="usr/include/kpathsea/
	usr/lib/libkpathsea.* usr/lib/pkgconfig/kpathsea.pc"
libptexenc1_CONTENTS="usr/bin/cygptexenc-1.dll"
libptexenc_devel_CONTENTS="usr/include/ptexenc/ usr/lib/libptexenc.*
	usr/lib/pkgconfig/ptexenc.pc"
libsynctex1_CONTENTS="usr/bin/cygsynctex-1.dll"
libsynctex_devel_CONTENTS="usr/include/synctex/ usr/lib/libsynctex.*
	usr/lib/pkgconfig/synctex.pc"
libtexlua52_5_CONTENTS="usr/bin/cygtexlua52-5.dll"
libtexlua52_devel_CONTENTS="usr/include/texlua52/
	usr/lib/libtexlua52.* usr/lib/pkgconfig/texlua52.pc"
libtexlua53_5_CONTENTS="usr/bin/cygtexlua53-5.dll"
libtexlua53_devel_CONTENTS="usr/include/texlua53/
	usr/lib/libtexlua53.* usr/lib/pkgconfig/texlua53.pc"
libtexluajit2_CONTENTS="usr/bin/cygtexluajit-2.dll"
libtexluajit_devel_CONTENTS="usr/include/texluajit/
	usr/lib/libtexluajit* usr/lib/pkgconfig/texluajit.pc"

CATEGORY="Publishing"

texlive_REQUIRES="texlive-collection-basic"

texlive_SUMMARY="TeX Live binaries"
libkpathsea6_SUMMARY="TeX file and path search library (runtime)"
libkpathsea_devel_SUMMARY="TeX file and path search library (development)"
libptexenc1_SUMMARY="TeX Unicode encoding library (runtime)"
libptexenc_devel_SUMMARY="TeX Unicode encoding library (development)"
libsynctex1_SUMMARY="TeX source/output synchronization library (runtime)"
libsynctex_devel_SUMMARY="TeX source/output synchronization library (development)"
libtexlua52_5_SUMMARY="TeX lua scripting library (runtime)"
libtexlua52_devel_SUMMARY="TeX lua scripting library (development)"
libtexlua53_5_SUMMARY="TeX lua scripting library (runtime)"
libtexlua53_devel_SUMMARY="TeX lua scripting library (development)"
libtexluajit2_SUMMARY="TeX Just-In-Time lua compiler library (runtime)"
libtexluajit_devel_SUMMARY="TeX Just-In-Time lua compiler library (development)"

DESCRIPTION="TeX Live provides a comprehensive, cross-platform TeX system. It 
includes all the major TeX-related programs, macro packages, and fonts 
that are free software, including support for many languages around the 
world."

DIFF_EXCLUDES="*.in configure build-aux m4 aclocal.m4"

CYGPORT_USE_UNSTABLE_API=1
src_unpack_hook() {
    cd texk/web2c/pdftexdir
    cp pdftoepdf-poppler0.68.0.cc pdftoepdf.cc
    cp pdftosrc-newpoppler.cc pdftosrc.cc
}

# I'll build a stripped-down clisp for building xindy, if necessary,
# so I don't have to rebuild texlive every time there's a clisp
# update.  When possible, however, I'll just use the clisp I build
# anyway for upstream TeX Live.

# BUILD_CLISP=1

C_PN=clisp
C_PV=2.49.92
C_P=${C_PN}-${C_PV}
if defined BUILD_CLISP
then
    C_PATCH_URI="20170303-update_modules_syscalls_configure.patch"
    C_PATCH_URI+=" 2.49-no_cygwin_README.patch"
    C_PATCH_URI+=" 20170306-socket_test.patch"
    C_PATCH_URI+=" 2.49.92-fix_dllimport.patch"
    C_PATCH_URI+=" 2.49.92-my_realpath.patch"

    L_PN=libsigsegv
    L_PV=2.12
    L_P=${L_PN}-${L_PV}
    L_PATCH_URI="2.11-1-eric.patch"

    SRC_URI+=" https://haible.de/bruno/gnu/${C_P}.tar.bz2"
    SRC_URI+=" mirror://gnu/${L_PN}/${L_P}.tar.gz"
    SRC_URI+=" ${C_PATCH_URI} ${L_PATCH_URI}"
fi

src_compile() {
    # First build clisp if necessary
    if defined BUILD_CLISP
    then
	cd ${S}/..
	mkdir -p clisp
	mv ${C_P} ${L_P} clisp
	cd clisp
	clisp_basedir=$(pwd)
	clisp_toolsdir=${clisp_basedir}/clisp-tools
	clisp_builddir=${clisp_basedir}/clisp-build
	mkdir -p ${clisp_toolsdir}
	inform "Building ${L_PN}"
	pushd ${L_P}
	patch -p2 < ${S}/${L_PATCH_URI}
	autoreconf
	./configure --prefix=${clisp_toolsdir} --disable-shared --enable-static
	make && make check && make install || error "Building ${L_PN} failed"
	popd
	inform "Building ${C_PN}"
	pushd ${C_P}
	for p in ${C_PATCH_URI}
	do
	    patch -p2 < ${S}/${p}
	done
	LDFLAGS="-Wl,--stack,0x800000" ./configure \
	       --prefix=${clisp_toolsdir} \
	       --without-ffcall \
	       --without-readline \
	       --without-dynamic-modules \
	       --without-termcap-ncurses \
	       --disable-nls \
	       --with-libsigsegv-prefix=${clisp_toolsdir} \
	       $clisp_builddir \
	    && (cd $clisp_builddir && make)
	cd $clisp_builddir && make check || true

	# Now build texlive.
	inform "Building ${PN}"
    else
	clisp_builddir=/home/kbrown/src/clisp-texlive/${C_P}-1.${ARCH}/build
    fi
    cd ${S}
    libtoolize --force --install
    ./reautoconf
    cd ${B}
    cygconf \
	--enable-shared \
	--enable-silent-rules \
	--enable-xindy \
	--disable-native-texlive-build \
	--with-banner-add=/Cygwin \
	--with-clisp-runtime=default \
	--with-system-cairo \
	--with-system-freetype2 --with-freetype2-include=/usr/include \
	--with-system-gd \
	--with-system-gmp \
	--with-system-graphite2 \
	--with-system-harfbuzz \
	--with-system-icu \
	--with-system-libpaper \
	--with-system-libpng \
	--with-system-mpfr \
	--with-system-ncurses \
	--with-system-pixman \
	--with-system-poppler \
	--with-system-potrace \
	--with-system-teckit \
	--with-system-xpdf \
	--with-system-zlib \
	--with-system-zziplib \
    CLISP=${clisp_builddir}/clisp.exe
    cygmake all
}

src_install() {
	cd ${B}
	cyginstall

	# All we want from cyginstall is the binaries.
	rm -fr ${D}/usr/share/texmf*
	find ${D}/usr/bin/ -mindepth 1 ! -name '*.exe' ! -name '*.dll' ! -name '*.mem' -delete
	newbin ${S}/texlive-enable-fontconfig.sh texlive-enable-fontconfig
	insinto /usr/share/fontconfig/conf.avail
	doins ${S}/09-texlive.conf
	markerdir=/var/lib/texmf/postinstall
	insinto ${markerdir}
	newins /dev/null ${PN}.lsr
	newins /dev/null ${PN}.refresh_fmts
	exeinto /etc/postinstall
	doexe ${S}/0p_texlive_prep.dash ${S}/zp_texlive_finish.dash
}

src_test() {
	cd ${B}
	make -k check
}
